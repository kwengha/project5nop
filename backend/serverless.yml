# TODO: Change the name of the org 
org: kwengha
app: backend-complete
service: serverless-complete-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packagerOptions:
      scripts:
        - rm -rf node_modules/aws-sdk

  documentation:
    api:
      info:
        version: v1.0.0
        title: Completes API
        description: serverless api for Complete application
    models:
      - name: CreateComplete
        contentType: application/json
        schema: ${file(models/create-complete-model.json)}
      - name: UpdateComplete
        contentType: application/json
        schema: ${file(models/update-complete-model.json)}
        
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    COMPLETE_TABLE: Completes-${self:provider.stage}
    COMPLETE_CREATED_AT_INDEX: CreatedAtIndex
    COMPLETE_S3_BUCKET: p5-complete-images-212612323430-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 30000
      
  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"


functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function - 
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetCompletes:
    handler: src/lambda/http/getCompletes.handler
    events:
      - http:
          method: get
          path: completes
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPLETE_TABLE}


  GetCompleteById:
    handler: src/lambda/http/getCompleteById.handler
    events:
      - http:
          method: get
          path: completes/{completeId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPLETE_TABLE}

  # TODO: Configure this function - 
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateComplete:
    handler: src/lambda/http/createComplete.handler
    events:
      - http:
          method: post
          path: completes
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-complete-model.json)}
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create complete task
            description: Create a new complete item
            requestModels:
              'application/json': CreateComplete
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:putItem
        Resource: 
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPLETE_TABLE}

          

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateComplete:
    handler: src/lambda/http/updateComplete.handler
    events:
      - http:
          method: patch
          path: completes/{completeId}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: update complete task
            description: update a new complete item
            requestModels:
              'application/json': UpdateComplete
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:updateItem
        Resource: 
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPLETE_TABLE}      

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteComplete:
    handler: src/lambda/http/deleteComplete.handler
    events:
      - http:
          method: delete
          path: completes/{completeId}
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: 
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPLETE_TABLE}

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: completes/{completeId}/attachment
          cors: true
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.COMPLETE_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:updateItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPLETE_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*" 

resources:
  Resources:
    # Add necessary AWS resources. You will need at least the following AWS resources
    # TODO: Fill the properties
    # Feel free to change the names as you like. 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,PATCH'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    # TODO: Create a DynamoDB table with local secondary index and a composite key
    CompletesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: completeId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: completeId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.COMPLETE_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.COMPLETE_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    # TODO: Complete the bucket properties below. 
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.COMPLETE_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.COMPLETE_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket